// Generated by CoffeeScript 1.6.3
(function() {
  var t7e,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  t7e = window.t7e || require('./t7e');

  t7e.Menu = (function() {
    Menu.prototype.languages = null;

    Menu.prototype.defaultLanguage = 'en-US';

    Menu.prototype.select = null;

    Menu.prototype.className = 't7e-menu';

    function Menu(params) {
      var label, language, preferredLanguage, property, value, _ref, _ref1;
      if (params == null) {
        params = {};
      }
      this.onChange = __bind(this.onChange, this);
      for (property in params) {
        value = params[property];
        this[property] = value;
      }
      if (this.languages == null) {
        this.languages = {};
      }
      if (this.select == null) {
        this.select = document.createElement('select');
      }
      this.select.className = this.className;
      if ('addEventListener' in this.select) {
        this.select.addEventListener('change', this.onChange, false);
      } else if ('attachEvent' in this.select) {
        this.select.attachEvent('onchange', this.onChange);
      }
      _ref = this.languages;
      for (language in _ref) {
        _ref1 = _ref[language], label = _ref1.label, value = _ref1.value;
        this.add(language, label, value);
      }
      preferredLanguage = localStorage.getItem('t7e-preferred-language');
      preferredLanguage || (preferredLanguage = navigator.language);
      preferredLanguage || (preferredLanguage = navigator.userLanguage.replace(/([a-z]+$)/, function(cc) {
        return cc.toUpperCase();
      }));
      this.set(preferredLanguage);
    }

    Menu.prototype.add = function(code, label, value, index) {
      var option;
      if (index == null) {
        index = NaN;
      }
      this.languages[code] = {
        label: label,
        value: value
      };
      option = document.createElement('option');
      option.innerHTML = label;
      option.value = code;
      if (isNaN(index)) {
        this.select.appendChild(option);
      } else {
        this.select.insertBefore(option, this.select.children[index]);
      }
      return null;
    };

    Menu.prototype.onChange = function(e) {
      var language,
        _this = this;
      if (!(this.select.value in this.languages)) {
        this.select.value = this.defaultLanguage;
      }
      localStorage.setItem('t7e-preferred-language', this.select.value);
      language = this.languages[this.select.value];
      if (typeof language.value === 'string') {
        this.select.setAttribute('loading', 'loading');
        this.request(language.value, function(response) {
          language.value = response;
          return _this.set(_this.select.value);
        });
      } else {
        t7e.load(language.value);
        t7e.refresh();
        document.body.parentNode.setAttribute('lang', this.select.value);
        this.select.removeAttribute('loading');
      }
      return null;
    };

    Menu.prototype.set = function(language) {
      this.select.value = language;
      this.onChange();
      return null;
    };

    Menu.prototype.request = function(url, callback) {
      var xhr;
      xhr = new XMLHttpRequest;
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          return callback(JSON.parse(xhr.responseText));
        }
      };
      xhr.open('GET', url, true);
      xhr.send(null);
      return null;
    };

    return Menu;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = t7e.Menu;
  }

}).call(this);
