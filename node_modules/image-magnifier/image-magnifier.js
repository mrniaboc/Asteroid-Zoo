(function() {
  var imageMagnifierContainer = document.createElement('div');
  imageMagnifierContainer.className = 'image-magnifier-container';
  document.body.appendChild(imageMagnifierContainer);

  function ImageMagnifier(target, magnifiedSrc, options) {
    this.onMouseOver = this.onMouseOver.bind(this);
    this.onMouseMove = this.onMouseMove.bind(this);
    this.onMouseOut = this.onMouseOut.bind(this);
    this.onScroll = this.onScroll.bind(this);

    this.target = target;
    this.target.addEventListener('mouseover', this.onMouseOver, false);
    this.target.addEventListener('mousemove', this.onMouseMove, false);
    this.target.addEventListener('mouseout', this.onMouseOut, false);
    this.target.setAttribute('data-magnified', true);

    this.el = document.createElement('div');
    this.el.className = 'image-magnifier';
    this.el.style.position = 'absolute';
    this.el.style.overflow = 'hidden';
    this.el.style.pointerEvents = 'none';

    if (options !== undefined) {
      this.el.style.width = options.width || options.radius || '';
      this.el.style.height = options.height || options.radius || '';
    }

    this.img = document.createElement('img');
    this.img.style.position = 'absolute';
    this.img.src = magnifiedSrc || this.target.src;
    this.img.style.display = 'absolute';

    this.deactivate();

    this.el.appendChild(this.img);
    imageMagnifierContainer.appendChild(this.el);

    this.constructor.instances.push(this);
  }

  ImageMagnifier.instances = [];

  ImageMagnifier.byNode = function(target) {
    for (var i = 0; i < this.instances.length; i++) {
      var instance = this.instances[i]
      if (instance.target === target) return instance;
    }
  };

  ImageMagnifier.prototype.targetRect = null;

  ImageMagnifier.prototype.elRect = null;

  ImageMagnifier.prototype.imgRect = null;

  ImageMagnifier.prototype.onMouseOver = function() {
    this.activate();
  };

  ImageMagnifier.prototype.onMouseMove = function(e) {
    this.move(e.pageX, e.pageY);
  };

  ImageMagnifier.prototype.onScroll = function(e) {
    this.findNodeBounds();
  };

  ImageMagnifier.prototype.onMouseOut = function() {
    this.deactivate();
  };

  ImageMagnifier.prototype.activate = function() {
    this.el.style.display = '';
    addEventListener('scroll', this.onScroll, false);
    this.findNodeBounds();
  };

  ImageMagnifier.prototype.findNodeBounds = function() {
    this.targetRect = this.target.getBoundingClientRect();
    this.elRect = this.el.getBoundingClientRect();
    this.imgRect = this.img.getBoundingClientRect();
  };

  ImageMagnifier.prototype.move = function(pageX, pageY) {
    if (this.targetRect === null) return;

    var targetLeft = this.targetRect.left;
    var targetRight = this.targetRect.right;
    var targetTop = this.targetRect.top;
    var targetBottom = this.targetRect.bottom;

    var targetWidth = targetRight - targetLeft;
    var targetHeight = targetBottom - targetTop;

    targetLeft += scrollX;
    targetTop += scrollY;

    var elWidth = this.elRect.right - this.elRect.left;
    var elHeight = this.elRect.bottom - this.elRect.top;

    var imgWidth = this.imgRect.right - this.imgRect.left;
    var imgHeight = this.imgRect.bottom - this.imgRect.top;

    var xOutOfOne = (pageX - (targetLeft)) / targetWidth;
    var yOutOfOne = (pageY - (targetTop)) / targetHeight;

    var elLeft = pageX - (elWidth / 2);
    var elTop = pageY - (elHeight / 2);

    var imgLeft = ((targetLeft) - ((imgWidth - targetWidth) * xOutOfOne)) - elLeft;
    var imgTop = ((targetTop) - ((imgHeight - targetHeight) * yOutOfOne)) - elTop;

    this.el.style.left = elLeft + 'px';
    this.el.style.top = elTop + 'px';
    this.img.style.left = imgLeft + 'px';
    this.img.style.top = imgTop + 'px';
  };

  ImageMagnifier.prototype.deactivate = function() {
    removeEventListener('scroll', this.onScroll, false);
    this.el.style.display = 'none';
  };

  ImageMagnifier.prototype.destroy = function() {
    removeEventListener('scroll', this.onScroll, false);
    this.el.parentNode.removeChild(this.el);
    this.target.removeEventListener('mouseover', this.onMouseOver, false);
    this.target.removeEventListener('mousemove', this.onMouseMove, false);
    this.target.removeEventListener('mouseout', this.onMouseOut, false);
    this.constructor.instances.splice(this.constructor.instances.indexOf(this), 1);
  };

  window.ImageMagnifier = ImageMagnifier;

  if (typeof module !== 'undefined') {
    module.exports = ImageMagnifier;
  }

  if (typeof define !== 'undefined') {
    define(function() {
      return ImageMagnifier;
    });
  }

  if (typeof jQuery !== 'undefined') {
    window.jQuery.fn.imageMagnifier = function(options) {
      return this.forEach(function() {
        return new ImageMagnifier(this, null, options);
      });
    };
  }
}());
