{
  "name": "marking-surface",
  "version": "0.4.6",
  "main": "./lib/marking-surface.js",
  "devDependencies": {
    "coffee-script": "~1.6.3",
    "easy-exec": "~0.0.1",
    "silver-server": "~0.1.1"
  },
  "readme": "Marking surface\n===============\n\n```coffee\nMarkingSurface = require 'marking-surface'\n{Mark, Tool, ToolControls} = MarkingSurface\n```\n\nThis is a quick overview. Read the source.\n\nMark\n----\n\nA `Mark` is just an hash-style object with a `set` method that fires a **change** event. In MVC terms, this is a model.\n\nIt also converts cleanly to JSON, ignoring underscore-prefixed keys.\n\nCustom setters can be created by extending the class and including a `set propertyName` method. Not that the name has a space in it, so wrap it in quotes.\n\n```coffee\nclass Point extends Mark\n  x: 0\n  y: 0\n\n  'set x': (value) -> Math.min 1, Math.max 0, value\n  'set y': (value) -> Math.min 1, Math.max 0, value\n```\n\nTool\n----\n\nA `Tool` watches its instance of `Mark`, calling `render` when the mark changes. In MVC terms, it is both a view and a controller.\n\nIf you need to use a subclass of `Mark` or `ToolControls` (detailed below), you can associate them with a tool by changing the tool class's `Mark` and `Controls` property.\n\n```coffee\nclass PointTool extends Tool\n  @Mark: Point\n  @Controls: PointControls\n```\n\nYou should create all the shapes you'll need in the `initialize` method using `createShape` to ensure that events are delegated properly. `createShape` can also apply class names to new shape elements. New shape elements are added to the root `group` group, which you can use to apply global transformations.\n\n```coffee\n  initialize: ->\n    @spot = @createShape 'circle.the-spot', cx: 0, cy: 0, r: 10\n```\n\nIn addition to `initialize`, There are a few important methods to extend:\n\n* `onFirstClick` fires when the mouse is first pressed on the marking surface.\n* `onFirstDrag` is fired when dragging during an initial click.\n* `onFirstRelease` is fired when releaseing after an initial click.\n* `render` should reposition the shapes according to the properties of the tool's mark.\n* `select` should change the view so it's apparent that this tool is selected (e.g. a thicker stroke), `deselect` the opposite.\n\nEvents fired on a shape will be passed to `on eventName`. Again note the space.\n\n```coffee\n  'on click': ->\n    alert 'Something was clicked!'\n```\n\nAnd each shape can have its own event handlers:\n\n```coffee\n  'on click spot': ->\n    alert 'A spot was clicked!'\n```\n\nSome special event names are `*start`, `*drag`, and `*end`, which work with mouse and touch events.\n\nToolControls\n------------\n\n`ToolControls` are associated with a `Tool` instance. Provide markup in the `template` property. Its `render` method is called when its tool's mark changes, and should update the markup to reflect the state of the mark. Position the controls near the tool with `moveTo`, which can be called from `render` or from the its tool's `render` method.\n\nMarkingSurface\n--------------\n\nA `MarkingSurface` is just a holder for tools. Instantiate one, and pass it a `tool` property. Then append its `el` where you need it.\n\n```coffee\nms = new MarkingSurface tool: PointTool\ndocument.body.appendChild ms.el\n```\n\n* * *\n\nDuring development, run `cake serve` to run a CoffeeScript-friendly dev server and compile from **src** to **lib**.\n",
  "readmeFilename": "README.md",
  "description": "Marking surface ===============",
  "_id": "marking-surface@0.4.6",
  "dist": {
    "shasum": "0ec0edf46ada88b99508ab95336d2dab3c809414"
  },
  "_from": "marking-surface@~0.4.6",
  "_resolved": "https://registry.npmjs.org/marking-surface/-/marking-surface-0.4.6.tgz"
}
