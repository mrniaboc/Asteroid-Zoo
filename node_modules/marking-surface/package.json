{
  "name": "marking-surface",
  "version": "0.3.4",
  "main": "./lib/marking-surface.js",
  "devDependencies": {
    "bower": "~1.2.3",
    "coffee-script": "~1.6.3",
    "easy-exec": "~0.0.1",
    "silver-server": "~0.1.1"
  },
  "readme": "Marking surface\n===============\n\nMake sure `window.jQuery` and `window.Raphael` are available.\n\nBaseClass\n---------\n\nEverything extends `BaseClass`. Its constructor takes a params object and mixes in any properties it shares with the instance. It also includes jQuery's `on`, `one`, `trigger`, and `off` event methods, and a `destroy` method.\n\nMark\n------\n\nA `Mark` is just an hash-style object with a `set` method that fires a **change** event. In MVC terms, this is a model.\n\nIt also converts cleanly to JSON.\n\nCustom setters can be created by extending the class and including a `set propertyName` method. Not that the name has a space in it, so wrap it in quotes.\n\n```\nclass Point extends Mark\n  x: 0\n  y: 0\n\n  'set x': (value) ->\n    Math.min 1, Math.max 0, value\n```\n\nTool\n----\n\nA `Tool` watches a `Mark`, calling `render` when the mark changes. In MVC terms, it is both a view and a controller.\n\nIf you need a subclass of `Mark`, you can associate it with a tool by changing the tool class's `Mark` property.\n\n```\nclass PointTool extends Tool\n  @Mark: Point\n```\n\nYou should create all the shapes you'll need in the `initialize` method using `createShape` to ensure that events are attached properly.\n\n```\ninitialize: ->\n  @spot = @createShape 'circle', 0, 0, 10, 10, fill: red\n```\n\nThere are a few important methods to extend:\n\n* `onFirstClick` fires when the mouse is first pressed on the marking surface.\n* `onFirstDrag` is fired when dragging during an initial click.\n* `onFirstRelease` is fired when releaseing after an initial click.\n* `render` should reposition the shapes according to the properties of the tool's mark.\n* `select` should change the view so it's apparent that this tool is selected (e.g. a thicker stroke), `deselect` the opposite.\n\nEvents fired on a shape will be passed to `on eventName`. Again note the space.\n\n```\n'on click': ->\n  alert 'Something was clicked!'\n```\n\nAnd each shape can have its own event handlers:\n\n```\n'on click spot': ->\n  alert 'A spot was clicked!'\n```\n\nA cursor can be applied to any shape by using the `cursors` property.\n\n```\ncursors:\n  spot: 'move'\n```\n\nMarkingSurface\n--------------\n\nA `MarkingSurface` is just a holder for tools. Instantiate one, and pass it a `tool` property and an optional `background` image property. Then append its `container` where you need it.\n\n```\nms = new MarkingSurface tool: PointTool\nms.container.appendTo document.body\n```\n\n* * *\n\nDuring development, run `cake serve` to run a CoffeeScript-friendly dev server and compile from **src** to **lib**.\n",
  "readmeFilename": "README.md",
  "description": "Marking surface ===============",
  "_id": "marking-surface@0.3.4",
  "_from": "marking-surface@~0.3.0"
}
