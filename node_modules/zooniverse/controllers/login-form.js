// Generated by CoffeeScript 1.6.3
(function() {
  var Api, BaseController, LoginForm, User, template, translate, _base, _base1, _base2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  if ((_base = window.zooniverse).controllers == null) {
    _base.controllers = {};
  }

  if ((_base1 = window.zooniverse).views == null) {
    _base1.views = {};
  }

  if ((_base2 = window.zooniverse).models == null) {
    _base2.models = {};
  }

  BaseController = zooniverse.controllers.BaseController || require('./base-controller');

  template = zooniverse.views.loginForm || require('../views/login-form');

  Api = zooniverse.Api || require('../lib/api');

  User = zooniverse.models.User || require('../models/user');

  translate = zooniverse.translate || require('../lib/translate');

  LoginForm = (function(_super) {
    __extends(LoginForm, _super);

    LoginForm.prototype.tagName = 'form';

    LoginForm.prototype.className = 'zooniverse-login-form';

    LoginForm.prototype.template = template;

    LoginForm.prototype.events = {
      'submit*': 'onSubmit',
      'click* button[name="sign-up"]': 'onClickSignUp',
      'click* button[name="sign-out"]': 'onClickSignOut'
    };

    LoginForm.prototype.elements = {
      'input[name="username"]': 'usernameInput',
      'input[name="password"]': 'passwordInput',
      'button[type="submit"]': 'signInButton',
      'button[name="sign-out"]': 'signOutButton',
      '.error-message': 'errorContainer'
    };

    function LoginForm() {
      var _this = this;
      LoginForm.__super__.constructor.apply(this, arguments);
      User.on('change', function() {
        return _this.onUserChange.apply(_this, arguments);
      });
    }

    LoginForm.prototype.onSubmit = function() {
      var login,
        _this = this;
      this.el.addClass('loading');
      this.signInButton.attr({
        disabled: true
      });
      login = User.login({
        username: this.usernameInput.val(),
        password: this.passwordInput.val()
      });
      login.done(function(_arg) {
        var message, success;
        success = _arg.success, message = _arg.message;
        if (!success) {
          return _this.showError(message);
        }
      });
      login.fail(function() {
        return _this.showError(translate('signInFailed'));
      });
      return login.always(function() {
        _this.el.removeClass('loading');
        return setTimeout(function() {
          return _this.signInButton.attr({
            disabled: User.current != null
          });
        });
      });
    };

    LoginForm.prototype.onClickSignOut = function() {
      this.signOutButton.attr({
        disabled: true
      });
      return User.logout();
    };

    LoginForm.prototype.onUserChange = function(e, user) {
      this.usernameInput.val((user != null ? user.name : void 0) || '');
      this.passwordInput.val((user != null ? user.api_key : void 0) || '');
      this.errorContainer.html('');
      this.usernameInput.attr({
        disabled: User.current != null
      });
      this.passwordInput.attr({
        disabled: User.current != null
      });
      this.signInButton.attr({
        disabled: User.current != null
      });
      return this.signOutButton.attr({
        disabled: User.current == null
      });
    };

    LoginForm.prototype.showError = function(message) {
      return this.errorContainer.html(message);
    };

    return LoginForm;

  })(BaseController);

  window.zooniverse.controllers.LoginForm = LoginForm;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = LoginForm;
  }

}).call(this);
