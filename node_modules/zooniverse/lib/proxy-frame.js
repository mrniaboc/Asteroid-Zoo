// Generated by CoffeeScript 1.6.3
(function() {
  var $, EventEmitter, ProxyFrame, beta, demo, flaggedHost, highPort, html, messageId, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  EventEmitter = window.zooniverse.EventEmitter || require('./event-emitter');

  $ = window.jQuery;

  html = $(document.body.parentNode);

  messageId = -1;

  demo = !!~location.hostname.indexOf('zooniverse-demo');

  beta = !!~location.pathname.indexOf('beta');

  highPort = +location.port >= 1024;

  flaggedHost = (_ref = location.search.match(/api=([^&]+)/)) != null ? _ref[1] : void 0;

  if ((flaggedHost != null) && !!!~flaggedHost.indexOf('//')) {
    flaggedHost = "//" + flaggedHost;
  }

  ProxyFrame = (function(_super) {
    __extends(ProxyFrame, _super);

    ProxyFrame.REJECTION = 'ProxyFrame not connected';

    ProxyFrame.prototype.host = flaggedHost || ("https://" + (demo || beta || highPort ? 'dev' : 'api') + ".zooniverse.org");

    ProxyFrame.prototype.path = '/proxy';

    ProxyFrame.prototype.loadTimeout = 5 * 1000;

    ProxyFrame.prototype.retryTimeout = 2 * 60 * 1000;

    ProxyFrame.prototype.el = null;

    ProxyFrame.prototype.className = 'proxy-frame';

    ProxyFrame.prototype.attempt = 0;

    ProxyFrame.prototype.ready = false;

    ProxyFrame.prototype.failed = false;

    ProxyFrame.prototype.deferreds = null;

    ProxyFrame.prototype.queue = null;

    function ProxyFrame(params) {
      var property, value,
        _this = this;
      if (params == null) {
        params = {};
      }
      this.timeout = __bind(this.timeout, this);
      ProxyFrame.__super__.constructor.apply(this, arguments);
      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        if (property in this && (value != null)) {
          this[property] = value;
        }
      }
      if (this.deferreds == null) {
        this.deferreds = {};
      }
      if (this.queue == null) {
        this.queue = [];
      }
      $(window).on('message', function(_arg) {
        var e;
        e = _arg.originalEvent;
        if (e.source === _this.el.get(0).contentWindow) {
          return _this.onMessage.apply(_this, arguments);
        }
      });
      this.connect();
    }

    ProxyFrame.prototype.connect = function() {
      var testBad, _ref1,
        _this = this;
      testBad = this.attempt < 0 ? '_BAD' : '';
      this.attempt += 1;
      if ((_ref1 = this.el) != null) {
        _ref1.remove();
      }
      this.el = $("<iframe src='" + this.host + this.path + testBad + "' class='" + this.className + "' data-attempt='" + this.attempt + "' style='display: none;'></iframe>");
      this.el.appendTo(document.body);
      return setTimeout((function() {
        if (!_this.ready) {
          return _this.timeout();
        }
      }), this.loadTimeout);
    };

    ProxyFrame.prototype.onReady = function() {
      var _this = this;
      this.attempt = 0;
      this.ready = true;
      this.failed = false;
      setTimeout((function() {
        var payload, _i, _len, _ref1, _results;
        _ref1 = _this.queue;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          payload = _ref1[_i];
          _results.push(_this.process(payload));
        }
        return _results;
      }), 100);
      html.removeClass('offline');
      return this.trigger('ready');
    };

    ProxyFrame.prototype.timeout = function() {
      this.trigger('timeout', this.loadTimeout);
      return this.onFailed();
    };

    ProxyFrame.prototype.onFailed = function() {
      var payload, _i, _len, _ref1,
        _this = this;
      if (this.ready) {
        return;
      }
      this.failed = true;
      _ref1 = this.queue;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        payload = _ref1[_i];
        this.deferreds[payload.id].reject(this.constructor.REJECTION);
      }
      this.queue.splice(0);
      html.addClass('offline');
      this.trigger('fail');
      return setTimeout((function() {
        return _this.connect();
      }), this.retryTimeout);
    };

    ProxyFrame.prototype.send = function(payload, done, fail) {
      var deferred,
        _this = this;
      messageId += 1;
      payload.id = messageId;
      deferred = new $.Deferred;
      deferred.then(done, fail);
      (function(messageId, deferred) {
        return deferred.always(function() {
          return delete _this.deferreds[messageId];
        });
      })(messageId, deferred);
      this.deferreds[messageId] = deferred;
      if (this.failed) {
        deferred.reject(this.constructor.REJECTION);
      } else if (this.ready) {
        this.process(payload);
      } else {
        this.queue.push(payload);
      }
      return deferred.promise();
    };

    ProxyFrame.prototype.process = function(payload) {
      return this.el.get(0).contentWindow.postMessage(JSON.stringify(payload), this.host);
    };

    ProxyFrame.prototype.onMessage = function(_arg) {
      var e, message;
      e = _arg.originalEvent;
      message = JSON.parse(e.data);
      if (message.id === 'READY') {
        return this.onReady();
      }
      if (message.failure) {
        this.deferreds[message.id].reject(message.response);
      } else {
        this.deferreds[message.id].resolve(message.response);
      }
      return this.trigger('response', [message]);
    };

    ProxyFrame.prototype.destroy = function() {
      this.el.remove();
      return ProxyFrame.__super__.destroy.apply(this, arguments);
    };

    return ProxyFrame;

  })(EventEmitter);

  window.zooniverse.ProxyFrame = ProxyFrame;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ProxyFrame;
  }

}).call(this);
