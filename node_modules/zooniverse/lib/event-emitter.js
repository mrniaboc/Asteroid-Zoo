// Generated by CoffeeScript 1.6.3
(function() {
  var $, EventEmitter, logTriggers,
    __hasProp = {}.hasOwnProperty;

  if (window.zooniverse == null) {
    window.zooniverse = {};
  }

  $ = window.jQuery;

  logTriggers = !!~location.href.indexOf('log=1');

  EventEmitter = (function() {
    var method, methodName;

    function EventEmitter() {}

    EventEmitter.on = function(eventName, handler) {
      if (this.jQueryEventProxy == null) {
        this.jQueryEventProxy = $({});
      }
      return this.jQueryEventProxy.on(eventName, handler);
    };

    EventEmitter.one = function(eventName, handler) {
      if (this.jQueryEventProxy == null) {
        this.jQueryEventProxy = $({});
      }
      return this.jQueryEventProxy.one(eventName, handler);
    };

    EventEmitter.off = function(eventName, handler) {
      if (this.jQueryEventProxy == null) {
        this.jQueryEventProxy = $({});
      }
      return this.jQueryEventProxy.off(eventName, handler);
    };

    EventEmitter.trigger = function(eventName, args) {
      var _base, _ref;
      if (args == null) {
        args = [];
      }
      if (logTriggers) {
        if (typeof console !== "undefined" && console !== null) {
          console.info(this.name || this.toString(), eventName.toUpperCase(), args);
        }
      }
      if (this.jQueryEventProxy == null) {
        this.jQueryEventProxy = $({});
      }
      (_ref = this.jQueryEventProxy).trigger.apply(_ref, arguments);
      return typeof (_base = this.constructor).trigger === "function" ? _base.trigger(eventName, [this].concat(args)) : void 0;
    };

    for (methodName in EventEmitter) {
      if (!__hasProp.call(EventEmitter, methodName)) continue;
      method = EventEmitter[methodName];
      EventEmitter.prototype[methodName] = method;
    }

    EventEmitter.prototype.destroy = function() {
      this.trigger('destroying');
      return this.off();
    };

    if (logTriggers) {
      EventEmitter.prototype.toString = function() {
        return "" + this.constructor.name + " instance";
      };
    }

    return EventEmitter;

  })();

  window.zooniverse.EventEmitter = EventEmitter;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = EventEmitter;
  }

}).call(this);
