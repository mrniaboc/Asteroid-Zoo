// Generated by CoffeeScript 1.6.3
(function() {
  var Api, User;

  Api = window.zooniverse.Api;

  User = window.zooniverse.models.User;

  describe('User', function() {
    describe('on a failed API', function() {
      before(function() {
        return this.api = new Api({
          project: 'test',
          host: "" + location.protocol + "//" + location.host,
          path: '/bad-path-for-user-tests',
          loadTimeout: 0
        });
      });
      beforeEach(function() {
        var _ref;
        if ((_ref = User.current) != null) {
          if (typeof _ref.destroy === "function") {
            _ref.destroy();
          }
        }
        return User.current = false;
      });
      return describe('fetch', function() {
        it('triggers "change" with no current user', function(done) {
          User.one('change', function(e, user) {
            expect(user).to.be["null"];
            return done();
          });
          return User.fetch();
        });
        return it('triggers "sign-in-error"', function(done) {
          User.one('sign-in-error', function() {
            return done();
          });
          return User.fetch();
        });
      });
    });
    return describe('on an available API', function() {
      before(function() {
        return this.api = new Api({
          project: 'test',
          host: "" + location.protocol + "//" + location.host,
          path: '/test/helpers/proxy#for-user-tests'
        });
      });
      describe('fetch (when signed in)', function() {
        return it('triggers "change" with the current user', function(done) {
          User.one('change', function(e, user) {
            expect(user.name).to.equal('clyde');
            expect(User.current).to.equal(user);
            return done();
          });
          return User.fetch();
        });
      });
      describe('signup', function() {
        describe('when given insufficient data', function() {
          return it('triggers "sign-in-error"', function(done) {
            User.one('sign-in-error', function() {
              return done();
            });
            return User.signup({
              username: 'tester',
              password: 'testing'
            });
          });
        });
        return describe('when given all required data', function() {
          return it('triggers "change" with the new current user', function(done) {
            var email, password, username;
            username = 'tester';
            password = 'testing';
            email = 'test@test.test';
            User.one('change', function(e, user) {
              expect(user.name).to.equal(username);
              expect(User.current).to.equal(user);
              return done();
            });
            return User.signup({
              username: username,
              password: password,
              email: email
            });
          });
        });
      });
      describe('logout', function() {
        return it('triggers "change" with no user and un-sets the current user', function(done) {
          User.one('change', function(e, user) {
            expect(user).to.be["null"];
            expect(User.current).to.be["null"];
            return done();
          });
          return User.logout();
        });
      });
      describe('fetch (when not logged in)', function() {
        return it('triggers "sign-in-error"', function(done) {
          User.one('sign-in-error', function() {
            return done();
          });
          return User.fetch();
        });
      });
      return describe('login', function() {
        describe('with a bad username or password', function() {
          return it('triggers "sign-in-error"', function(done) {
            User.one('sign-in-error', function() {
              return done();
            });
            return User.login({
              username: 'nobody',
              password: 'nothing'
            });
          });
        });
        return describe('with a good username and password', function() {
          return it('triggers "change" with the current user', function(done) {
            var password, username;
            username = 'tester';
            password = 'testing';
            User.one('change', function(e, user) {
              expect(user.name).to.equal(username);
              if ((user != null) && (User.current != null) && user === User.current) {
                return done();
              }
            });
            return User.login({
              username: username,
              password: password
            });
          });
        });
      });
    });
  });

}).call(this);
