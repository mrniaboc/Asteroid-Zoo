// Generated by CoffeeScript 1.6.3
(function() {
  var BaseModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = zooniverse.models.BaseModel;

  describe('BaseModel', function() {
    beforeEach(function() {
      var _ref;
      return this.ModelClass = (function(_super) {
        __extends(ModelClass, _super);

        function ModelClass() {
          _ref = ModelClass.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        ModelClass.prototype.name = '';

        return ModelClass;

      })(BaseModel);
    });
    it('keeps track of its instances', function() {
      var instance;
      instance = new this.ModelClass;
      expect(this.ModelClass.instances[0]).to.equal(instance);
      expect(this.ModelClass.count()).to.equal(1);
      instance.destroy();
      return expect(this.ModelClass.count()).to.equal(0);
    });
    it('gives its instances a unique id', function() {
      var foo;
      foo = new this.ModelClass;
      return expect(foo.id).to.match(/C_\d+/);
    });
    describe('count', function() {
      return it('returns a count of instances', function() {
        new this.ModelClass;
        expect(this.ModelClass.count()).to.equal(1);
        new this.ModelClass;
        expect(this.ModelClass.count()).to.equal(2);
        new this.ModelClass;
        return expect(this.ModelClass.count()).to.equal(3);
      });
    });
    describe('first', function() {
      return it('returns the first instace ', function() {
        var bar, foo;
        foo = new this.ModelClass;
        bar = new this.ModelClass;
        expect(this.ModelClass.first()).to.equal(foo);
        foo.destroy();
        return expect(this.ModelClass.first()).to.equal(bar);
      });
    });
    describe('find', function() {
      return it('returns the instance with the given ID', function() {
        var foo;
        foo = new this.ModelClass({
          id: 'foo'
        });
        return expect(this.ModelClass.find('foo')).to.equal(foo);
      });
    });
    describe('search', function() {
      return it('returns the instances that match the give property values', function() {
        var bar, foo;
        foo = new this.ModelClass({
          name: 'foo'
        });
        bar = new this.ModelClass({
          name: 'bar'
        });
        expect(this.ModelClass.search({
          name: 'foo'
        })).to.eql([foo]);
        return expect(this.ModelClass.search({
          name: 'bar'
        })).to.eql([bar]);
      });
    });
    return describe('destroyAll', function() {
      return it('destroys all its instances', function() {
        new this.ModelClass;
        new this.ModelClass;
        new this.ModelClass;
        this.ModelClass.destroyAll();
        return expect(this.ModelClass.count()).to.equal(0);
      });
    });
  });

}).call(this);
