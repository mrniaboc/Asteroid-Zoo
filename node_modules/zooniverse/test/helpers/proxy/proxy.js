// Generated by CoffeeScript 1.6.3
(function() {
  var $, database;

  $ = window.jQuery;

  database = window.database;

  $.mockjax({
    url: '/marco',
    response: function() {
      return this.responseText = JSON.stringify('polo');
    }
  });

  $.mockjax({
    url: "/projects/test/signup",
    response: function(settings) {
      var email, password, responseText, username, _ref, _ref1, _ref2;
      username = (_ref = settings.data) != null ? _ref.username : void 0;
      password = (_ref1 = settings.data) != null ? _ref1.password : void 0;
      email = (_ref2 = settings.data) != null ? _ref2.email : void 0;
      if (username && password && email) {
        database.post('users', {
          id: username,
          name: username,
          password: password
        });
        database.currentUser = database.get('users', username);
        return this.responseText = database.currentUser;
      } else {
        return responseText = {
          success: false,
          message: 'Username, password, and email are required'
        };
      }
    }
  });

  $.mockjax({
    url: "/projects/test/login",
    response: function(settings) {
      var password, user, username, _ref, _ref1;
      username = (_ref = settings.data) != null ? _ref.username : void 0;
      password = (_ref1 = settings.data) != null ? _ref1.password : void 0;
      user = database.get('users', username);
      return this.responseText = user.password === password ? user : {
        success: false,
        message: 'Wrong username or password'
      };
    }
  });

  $.mockjax({
    url: "/projects/test/current_user",
    response: function(settings) {
      return this.responseText = database.currentUser || {
        success: false
      };
    }
  });

  $.mockjax({
    url: "/talk/messages",
    response: function(settings) {
      return this.responseText = database.get('messages');
    }
  });

  $.mockjax({
    url: "/projects/test/logout",
    response: function() {
      database.currentUser = null;
      return this.responseText = {
        success: true
      };
    }
  });

  $.mockjax({
    url: '/projects/test/subjects',
    response: function(settings) {
      var limit, _ref;
      limit = (_ref = settings.data) != null ? _ref.limit : void 0;
      if (limit == null) {
        limit = 5;
      }
      return this.responseText = window.database.get('subjects', limit, {
        splice: true
      });
    }
  });

  $.mockjax({
    url: '/projects/test/users/*/recents',
    response: function(settings) {
      var page, per_page, start, _ref, _ref1;
      page = ((_ref = settings.data) != null ? _ref.page : void 0) || 1;
      per_page = ((_ref1 = settings.data) != null ? _ref1.per_page : void 0) || 10;
      start = (page * per_page) - per_page;
      return this.responseText = JSON.stringify(database.get('recents', per_page, {
        page: page
      }));
    }
  });

  $(window).on('message', function(_arg) {
    var beforeSend, data, e, headers, id, recipient, request, type, url, _ref;
    e = _arg.originalEvent;
    recipient = e.origin;
    _ref = JSON.parse(e.data), id = _ref.id, type = _ref.type, url = _ref.url, data = _ref.data, headers = _ref.headers;
    if (headers == null) {
      headers = {};
    }
    beforeSend = function(xhr) {
      var header, value, _results;
      headers['X-CSRF-Token'] = $('meta[name="csrf-token"]').attr('content');
      _results = [];
      for (header in headers) {
        value = headers[header];
        _results.push(xhr.setRequestHeader(header, value));
      }
      return _results;
    };
    request = $.ajax({
      type: type,
      beforeSend: beforeSend,
      url: url,
      data: data,
      dataType: 'json'
    });
    request.done(function(response) {
      return parent.postMessage(JSON.stringify({
        id: id,
        response: response
      }), recipient);
    });
    return request.fail(function(response) {
      return parent.postMessage(JSON.stringify({
        id: id,
        response: response,
        failure: true
      }), recipient);
    });
  });

  setTimeout(function() {
    return parent.postMessage(JSON.stringify({
      id: 'READY',
      success: true,
      response: +(new Date)
    }), '*');
  });

}).call(this);
