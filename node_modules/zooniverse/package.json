{
  "name": "zooniverse",
  "version": "0.2.2",
  "devDependencies": {
    "chai": "~1.4.2",
    "chai-jquery": "~1.1.1",
    "coffee-script": "~1.6.3",
    "eco": "~1.1.0-rc-3",
    "mocha": "~1.8.1",
    "mocha-phantomjs": "~1.1.3",
    "nib": "~0.9.1",
    "serveup": "~0.0.5",
    "sinon": "~1.5.2",
    "sinon-chai": "~2.3.1",
    "stylus": "~0.32.0",
    "wrench": "~1.4.4"
  },
  "scripts": {
    "pretest": "serveup --port 7357 & echo $! > ./serveup.pid",
    "test": "mocha-phantomjs http://localhost:7357/test/runner.html",
    "posttest": "kill `cat ./serveup.pid` ; rm ./serveup.pid"
  },
  "readme": "Some terminology\n================\n\nThe basic idea of a project is for the back end (Ouroboros) to send **subjects** to **users**, who will create one or more **annotations**, which are bundled into a **classification** and returned to the back end.\n\nGetting set up\n==============\n\nThe library is available in a provate GitHub repo, zooniverse/Zooniverse. There are a couple branches; this document describes the **no-deps** branch, which is pretty similar to master, but has minimal dependencies and a couple more generic models.\n\nWe've been building apps in CoffeeScript, using Spine (spine/spine) as an MVC library and Hem (spine/hem) as a dev server/builder.\n\nLet's use Spine.app to generate an initial framework for the app:\n\n```\nnpm install --global spine.app\nspine new Demo-Zoo\ncd Demo-Zoo\nnpm install\n```\n\nRun `hem server --port 8080` and open **http://localhost:8080/** to make sure everything is running okay.\n\nNow let's install the Zooniverse library:\n\n```\nnpm install --save zooniverse\n```\n\nEdit **public/index.html** and remove the weird little \"start\" script that's there. Let's also **move the other script tags into the body** element so we don't have to wait for it to load every time we do something.\n\nAdd the top bar\n===============\n\nNow open up **app/index.coffee**. First we'll create a new API. We'll piggyback on the **planet_four** project for now. If there's a project set up on the back end, use its name here instead.\n\n```\nApi = require 'zooniverse/lib/api'\nnew Api project: 'planet_four'\n```\n\nNow we'll add the top bar first so we can log in.\n\n```\nTopBar = require 'zooniverse/controllers/top-bar'\ntopBar = new TopBar\ntopBar.el.appendTo document.body\n```\n\nWe'll also have to tell Hem about the modules we're using by adding them to the \"dependencies\" array in **slug.json** and restarting the server. Add `zooniverse/lib/api` and `zooniverse/controllers/top-bar` now.\n\nWe also need to tell Hem about the base-64 library, which isn't an NPM module. Add `node_modules/zooniverse/vendor/base64.js` to the \"libs\" array in **slug.json**\n\nLet's add the CSS, too. In **css/index.styl**, add:\n\n```\n@import \"../node_modules/zooniverse/src/css/top-bar\"\n@import \"../node_modules/zooniverse/src/css/dialog\"\n```\n\nWe should check to see if a user is already logged in when the page loads. Back in **app/index.coffee**:\n\n```\nUser = require 'zooniverse/models/user'\nUser.fetch()\n```\n\nDon't forget to add `zooniverse/models/user` to your **slug.json**. Hem is fun.\n\nCreate the classification interface\n===================================\n\nWe'll base this on Spine's `Controller` class. Check out the Spine docs if you're not familiar.\n\n```\nSpine = require 'spine'\nSubject = require 'zooniverse/models/subject'\n$ = require 'jqueryify'\nClassification = require 'zooniverse/models/classification'\n\nclass Classifier extends Spine.Controller\n  events:\n    'change input[name=\"quality\"]': 'onChangeAnnotate'\n    'click button[name=\"next\"]': 'onClickNext'\n\n  constructor: ->\n    super\n```\n\nWhen the user changes, we'll load a new subject. This is to keep users from seeing the same subject more than once. We can also check to see if the user has completed the tutorial.\n\n```\n    User.on 'change', (e, user) =>\n      if user?.project.tutorial_done\n        if @classification.subject.metadata.tutorial\n          # A user is logged in and they've already finished the tutorial.\n          Subject.next()\n      else\n        # Load the tutorial subject and start the tutorial!\n```\n\nWhen a new subject is selected, create a new classification to go with it and update the view in the classifier.\n\n```\n    Subject.on 'select', =>\n      @classification = new Classification subject: Subject.current\n      @render()\n\n  render: ->\n    @el.html \"\"\"\n      <img src='#{Subject.current.location.standard}' style=\"max-width: 200px;\" />\n      <label><input type=\"radio\" name=\"quality\" value=\"awesome\" />Awesome</label>\n      <label><input type=\"radio\" name=\"quality\" value=\"lame\" />Lame</label>\n      <button name=\"next\">Next</button>\n    \"\"\"\n\n  onChangeAnnotate: (e) ->\n    value = $(e.target).val()\n\n    # Update the classification when the user works the controls:\n    @classification.removeAnnotation @classification.annotations[0]\n    @classification.annotate quality: value\n```\n\nUsually we have an intermittent step directing people to Talk, but we'll skip that for this example.\n\n```\n  onClickNext: ->\n    @classification.send()\n    Subject.next()\n\nclassifier = new Classifier\nclassifier.el.appendTo document.body\n```\n\nDeveloping the library\n======================\n\n```\nhub clone -p zooniverse/Zooniverse -b no-deps\ncd Zooniverse\nnpm install\ncake serve\nmocha-phantomjs http://localhost:8000/test/runner.html\n```\n",
  "readmeFilename": "README.md",
  "description": "Some terminology ================",
  "_id": "zooniverse@0.2.2",
  "_from": "zooniverse@~0.2.0"
}
